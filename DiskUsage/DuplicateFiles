#!/bin/bash
#
#     Script to create Duplicate File Report
#     Bob Brandt <projects@brandt.ie>
# 
VERSION=0.1
excludeDir="*~snapshot*"
minSize="1M"

usage() {
        [ "$2" == "" ] || echo -e "$2"
        echo -e "Usage: $0 Directory [options]"
        echo -e "Options:"
        echo -e " -h, --help     display this help and exit"
        echo -e " -v, --version  output version information and exit"       
        exit ${1:-0}
}

version() {
        echo -e "$0 $VERSION"
        echo -e "Copyright (C) 2011 Free Software Foundation, Inc."
        echo -e "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
        echo -e "This is free software: you are free to change and redistribute it."
        echo -e "There is NO WARRANTY, to the extent permitted by law.\n"
        echo -e "Written by Bob Brandt <projects@brandt.ie>."
        exit 0
}

getmd5sum() {
	scanPath="$1"
	printPath="$2"

	datestr=$( stat -c %Y "$scanPath" )
	datestr=$( date -d "@$datestr" +"%Y-%m-%d %H:%M" )
	
	namemd5sum=$( basename "$scanPath" | md5sum | cut -d " " -f 1 )
	sizestr=$( stat -c %s "$scanPath" )
	sizemd5sum=$( echo "$sizestr" | md5sum | cut -d " " -f 1 )

	md5str=$( md5sum "$scanPath" | cut -d " " -f 1 )
	echo -n "." >&2
	echo "\"$md5str$sizemd5sum\",\"$sizestr\",\"$printPath\""
}

scanDir() {
	fullpath=$( realpath "$1" )
	tmpFile=${TEMP:-"/tmp"}"/$$."$( basename "$1" )
	rm "$tmpFile"

	echo "Scanning Directory ($fullpath):" >&2
	IFS=$'\n'       # make newlines the only separator	
	for dir in $( find "$fullpath" -path "$excludeDir" -iname "$excludeDir" -prune -o -type f  -size +$minSize -print )
	do
		relativepath=${dir/$fullpath/}
		relativepath="./"${relativepath/\//}

		getmd5sum "$dir" "$relativepath" >> "$tmpFile" &
	done

	# Wait for all subprocesses to exit
	while true
	do
  		wait -n || { 
  			code="$?"
    		([[ $code = "127" ]] && exit 0 || return "$code")
    		break
			}
	done;

	echo -e "\n\n"
	sort "$tmpFile" | uniq --check-char=66 -D > "$tmpFile.sorted"
	uniq --check-char=66 -c "$tmpFile.sorted" | sed 's|^ *\([0-9][0-9]*\) "\([0-9a-f]*\)".*|"\2","\1"|' > "$tmpFile.count"
	join -t "," -j 1 -o 2.1,1.1,1.2,1.3 "$tmpFile.sorted" "$tmpFile.count"

	rm "$tmpFile"	
	rm "$tmpFile.*"
}

# Execute getopt
ARGS=$(getopt -o vh -l "help,version" -n "$0" -- "$@") || usage 1 " "

#Bad arguments
#[ $? -ne 0 ] && usage 1 "$0: No arguments supplied!\n"

eval set -- "$ARGS";

while /bin/true ; do
	case "$1" in
        -h | --help )         usage 0 ;;
        -v | --version )      version ;;
        -- )                  shift ; break ;;
        * )                   usage 1 "$0: Invalid argument!\n" ;;
        esac
        shift
done

test "$#" == "0" && usage 1 "You must supply at least one directory!\n"

for dir in "$@"
do
	test -d "$dir" || usage 1 "All arguments must be Directories! ($dir)\n"
done

for dir in "$@"
do
	scanDir "$dir"
	echo -e "\n"
done

exit $?



